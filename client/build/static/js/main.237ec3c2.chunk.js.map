{"version":3,"sources":["components/ArticleList.js","actions/postAction.js","actions/types.js","components/Opening.js","components/More.js","components/Navbar.js","components/Title.js","reducers/postReducer.js","reducers/index.js","store.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["ArticleList","this","props","fetchPosts","postItems","posts","map","post","key","id","className","title","articlebody","Component","connect","state","items","dispatch","fetch","then","res","json","type","payload","Opening","More","Navbar","to","Title","initialState","item","combineReducers","action","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","About","App","path","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wPAKMA,E,kLAIHC,KAAKC,MAAMC,e,+BAIR,IAAMC,EAAYH,KAAKC,MAAMG,MAAMC,KAAI,SAAAC,GAAI,OAC3C,yBAAKC,IAAKD,EAAKE,GAAIC,UAAU,cAC3B,uBAAGA,UAAU,SAASH,EAAKI,OAC3B,uBAAGD,UAAU,eAAeH,EAAKK,iBAGrC,OACE,6BACGR,O,GAhBiBS,aA2BXC,eALS,SAAAC,GAAK,MAAK,CAEhCV,MAAOU,EAAMV,MAAMW,SAGmB,CAAEb,WCjBhB,WAEtB,OAAO,SAAUc,GAEbC,MAAM,aACLC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAd,GAAK,OAAIY,EAAS,CACrBK,KCtBe,cDuBfC,QAASlB,UDSNS,CAAyCd,GGlBzCwB,EAZf,uKAEQ,OACI,yBAAKd,UAAU,UAAf,uWAHZ,GAA6BG,aC+CdY,EA/Cf,uKAqBQ,OACI,yBAAKf,UAAU,mBACX,6BACI,sEADJ,iHAMI,6BANJ,0LAUI,mCAjCpB,GAA0BG,a,QCgBXa,EAff,uKAEQ,OACI,wBAAIhB,UAAU,QACV,kBAAC,IAAD,CAAMiB,GAAG,SACL,wBAAIjB,UAAU,QAAd,SAEJ,kBAAC,IAAD,CAAMiB,GAAG,UACL,wBAAIjB,UAAU,QAAd,eARpB,GAA4BG,aCUbe,EAXf,uKAEQ,OACI,yBAAKlB,UAAU,UACX,kDACA,2EALhB,GAA2BG,a,gCCArBgB,EAAe,CAEjBb,MAAO,GAEPc,KAAM,ICFKC,cAAgB,CAC3B1B,MDIW,WAAwC,IAA/BU,EAA8B,uDAAtBc,EAAcG,EAAQ,uCAClD,OAAOA,EAAOV,MACV,ILXmB,cKYf,OAAO,2BACAP,GADP,IAEIC,MAAOgB,EAAOT,UAEtB,ILfgB,WKgBZ,OAAO,2BACAR,GADP,IAEIC,MAAM,CAAEgB,EAAOT,SAAV,mBAAsBR,EAAMC,UAEzC,QACI,OAAOD,MEjBbkB,EAAa,CAACC,KACdC,EAAmBC,OAAOC,sCAAwCC,IAWzDC,EATDC,YACVC,EALiB,GAQjBN,EACIO,IAAe,WAAf,EAAmBT,KCEZU,EAbf,uKAEQ,OACI,yBAAKjC,UAAU,SAAf,wFAGI,6BAHJ,mGAHZ,GAA2BG,a,OC6CZ+B,E,uKA5BX,OAEE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,SACV,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,e,GApBIjC,aCLEkC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.237ec3c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postAction'\n\nclass ArticleList extends Component {\n\n  //Lifecycle methods\n  componentDidMount() {\n   this.props.fetchPosts();\n  }\n\n  render() {\n      const postItems = this.props.posts.map(post => (\n      <div key={post.id} className=\"articlebox\">\n        <p className=\"title\">{post.title}</p>\n        <p className=\"articlebody\">{post.articlebody}</p>\n      </div>\n    ));\n    return (\n      <div>\n        {postItems}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  //This is based on what we called it when we exported it in the /reducers/index.js\n  posts: state.posts.items\n})\n\nexport default connect(mapStateToProps, { fetchPosts })(ArticleList);","import {FETCH_POSTS, NEW_POST} from '../actions/types';\n// import axios from 'axios';\n\n// export const fetchPosts = () => {\n//     dispatch(setItemsLoading());\n//     axios\n//         .get('/api/items')\n//         .then(res =>\n//             dispatch({\n//                 type: FETCH_POSTS,\n//                 payload: res.data\n//             }))\n// }\n\n// Code that worked\nexport const fetchPosts = () => {\n    //Thunk allows for the dispatch method to be called and we can make asynchronus requests\n    return function (dispatch) {\n        //changed the 'api/items' to https://bored-list.herokuapp.com/api/items\n        fetch('./db.json')\n        .then (res => res.json())\n        .then (posts => dispatch({ \n            type: FETCH_POSTS,\n            payload: posts\n        }));\n    }\n};\n\n// export const addArticle = (item) => { \n//     //Thunk allows for the dispatch method to be called and we can make asynchronus requests\n//     return function (dispatch) {\n//         axios\n//         .post('/api/items', item) \n//         .then (res => \n//             dispatch({\n//                 type: NEW_POST,\n//                 payload: res.data\n//             })\n//         )\n//     }\n// };","export const FETCH_POSTS = 'FETCH_POSTS'\nexport const NEW_POST = 'NEW_POST'","import React, { Component } from 'react'\n\nexport class Opening extends Component {\n    render() {\n        return (\n            <div className=\"opener\">\n                We’ve all know the story. Suddenly some free time has fell into our lap, and we don’t know what to do with it.\n                Facebook has nothing interesting, youtube doesn’t recommend anything noteworthy, and we’ve heard it all in our song list.\n                Well fear not! Our top bore-ologists have collected a quick reference-sheet for this time in case.\n            </div>\n        )\n    }\n}\n\nexport default Opening","import React, { Component } from 'react'\n\nexport class More extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         message:''\n    //     };\n        \n    //     this.onChange = this.onChange.bind(this);\n    //     this.onSubmit = this.onSubmit.bind(this);\n    // }\n\n    // onChange(e) {\n    //     this.setState({ [e.target.name]: e.target.value })\n    // }\n\n    // onSubmit(e) {\n    //     e.preventDefault();\n    //     console.log(this.state.message)\n    // }\n\n    render() {\n        return (\n            <div className=\"articlebox more\">\n                <div>\n                    <h1>\n                        Didn't find what you were looking for?\n                    </h1>\n                    We are sorry. Why not check back later? \n                    This website is still being worked on. New content on the 5th of June.\n                    <br/>\n                    We ask you to help us out a bit though. \n                    If you find us worthy,\n                    just click the button proving that you were here, and that putting effort into the development of this site is worth it.\n                    <br/>\n                </div>\n                {/* <div>\n                    <form>\n                        <label>Message:</label>\n                        <textarea name=\"message\" onChange={this.onChange} value={this.props.message}></textarea>\n                        <button onClick={this.onSubmit}>I was here</button>\n                    </form>\n                </div> */}\n            </div>\n        )\n    }\n}\n\nexport default More","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport class Navbar extends Component {\n    render() {\n        return (\n            <ul className=\"flex\">\n                <Link to=\"/list\">\n                    <li className=\"mr-6\">Home</li>\n                </Link>\n                <Link to=\"/about\">\n                    <li className=\"mr-6\">About</li>\n                </Link>\n            </ul>\n        )\n    }\n}\n\nexport default Navbar\n","import React, { Component } from 'react'\n\nexport class Title extends Component {\n    render() {\n        return (\n            <div className=\"opener\">\n                <h1>The Big Bored List</h1>\n                <h2>A.K.A.: What to do in your spare time?</h2>\n            </div>\n        )\n    }\n}\n\nexport default Title\n","import { FETCH_POSTS, NEW_POST } from '../actions/types';\n\nconst initialState = {\n    //The list of article object displayed\n    items: [],\n    //The article we add\n    item: {},\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_POSTS:\n            return {\n                ...state,\n                items: action.payload\n            }\n        case NEW_POST:\n            return {\n                ...state,\n                items: [action.payload, ...state.items]\n            }\n        default:\n            return state\n    }\n}","//Root reducer to bring together all the other reducers\nimport { combineReducers } from 'redux'\nimport postReducer from \"./postReducer\"\n\nexport default combineReducers({\n    posts: postReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers/index'\n\nconst initialState = {};\nconst middleware = [thunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    rootReducer, \n    initialState,\n    //Wrapping the enhancers into the compose() function\n    composeEnhancers(\n        applyMiddleware(...middleware)\n    )\n);\n\nexport default store","import React, { Component } from 'react'\n\nexport class About extends Component {\n    render() {\n        return (\n            <div className=\"about\">\n                Greetings, I am Mark Tovari.\n                This website is part of my portfolio as a web developer.\n                <br/>\n                It was made using MongoDB, Express, React, Redux, and Node.js along with some Tailwind CSS.\n            </div>\n        )\n    }\n}\n\nexport default About\n","import React, { Component } from 'react';\nimport './App.css';\nimport ArticleList from './components/ArticleList';\nimport Opening from './components/Opening';\nimport More from './components/More'\nimport Navbar from './components/Navbar'\nimport Title from './components/Title'\n\n// Redux\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport About from './components/pages/About';\n// import AddArticle from './components/AddArticle';\n\n// React-router-Dom\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return(\n      /*Provider from React and Router from React-Dom first*/\n      <Provider store={store}>\n        <Router>\n        <Switch>\n          <Route path=\"/list\">\n            <React.Fragment>\n              <Title/>\n              <Opening/>\n              <Navbar/>\n              <ArticleList/>\n              <More/>\n            </React.Fragment>\n          </Route>\n          <Route path=\"/about\">\n            <React.Fragment>\n              <Title/>\n              <Navbar/>\n              <About/>\n            </React.Fragment>\n          </Route>\n        </Switch>                \n        </Router>\n      </Provider>\n    )\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}